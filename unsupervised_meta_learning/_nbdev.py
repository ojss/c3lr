# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"c_imshow": "01_nn_utils.ipynb",
         "Flatten": "01_nn_utils.ipynb",
         "conv3x3": "01_nn_utils.ipynb",
         "get_proto_accuracy": "01_nn_utils.ipynb",
         "get_accuracy": "02_maml_pl.ipynb",
         "collate_task": "01b_data_loaders_pl.ipynb",
         "collate_task_batch": "01b_data_loaders_pl.ipynb",
         "get_episode_loader": "01b_data_loaders_pl.ipynb",
         "UnlabelledDataset": "01b_data_loaders_pl.ipynb",
         "get_cub_default_transform": "01b_data_loaders_pl.ipynb",
         "get_simCLR_transform": "01b_data_loaders_pl.ipynb",
         "get_omniglot_transform": "01b_data_loaders_pl.ipynb",
         "get_custom_transform": "01b_data_loaders_pl.ipynb",
         "identity_transform": "01b_data_loaders_pl.ipynb",
         "UnlabelledDataModule": "01b_data_loaders_pl.ipynb",
         "OmniglotDataModule": "01b_data_loaders_pl.ipynb",
         "MiniImagenetDataModule": "01b_data_loaders_pl.ipynb",
         "cg": "01c_grad_utils.ipynb",
         "cat_list_to_tensor": "01c_grad_utils.ipynb",
         "reverse_unroll": "01c_grad_utils.ipynb",
         "reverse": "01c_grad_utils.ipynb",
         "fixed_point": "01c_grad_utils.ipynb",
         "CG": "01c_grad_utils.ipynb",
         "CG_normaleq": "01c_grad_utils.ipynb",
         "neumann": "01c_grad_utils.ipynb",
         "exact": "01c_grad_utils.ipynb",
         "grd": "01c_grad_utils.ipynb",
         "list_dot": "01c_grad_utils.ipynb",
         "jvp": "01c_grad_utils.ipynb",
         "get_outer_gradients": "01c_grad_utils.ipynb",
         "update_tensor_grads": "01c_grad_utils.ipynb",
         "grad_unused_zero": "01c_grad_utils.ipynb",
         "DifferentiableOptimizer": "01c_grad_utils.ipynb",
         "HeavyBall": "01c_grad_utils.ipynb",
         "Momentum": "01c_grad_utils.ipynb",
         "GradientDescent": "01c_grad_utils.ipynb",
         "gd_step": "01c_grad_utils.ipynb",
         "heavy_ball_step": "01c_grad_utils.ipynb",
         "torch_momentum_step": "01c_grad_utils.ipynb",
         "euclidean_distance": "01d_proto_utils.ipynb",
         "cosine_similarity": "01d_proto_utils.ipynb",
         "get_num_samples": "01d_proto_utils.ipynb",
         "get_prototypes": "01d_proto_utils.ipynb",
         "prototypical_loss": "01d_proto_utils.ipynb",
         "CNN_4Layer": "01d_proto_utils.ipynb",
         "Encoder": "01d_proto_utils.ipynb",
         "Decoder": "01d_proto_utils.ipynb",
         "CAE": "01d_proto_utils.ipynb",
         "Encoder4L": "01d_proto_utils.ipynb",
         "Decoder4L": "01d_proto_utils.ipynb",
         "Decoder4L4Mini": "01d_proto_utils.ipynb",
         "CAE4L": "01d_proto_utils.ipynb",
         "get_images_labels_from_dl": "01d_proto_utils.ipynb",
         "logger": "02_maml_pl.ipynb",
         "ConvolutionalNeuralNetwork": "02_maml_pl.ipynb",
         "MAML": "02_maml_pl.ipynb",
         "UMTRA": "02_maml_pl.ipynb",
         "cg_solve": "02b_iMAML.ipynb",
         "iMAML": "02b_iMAML.ipynb",
         "PrototypicalNetwork": "03_protonet_pl.ipynb",
         "CactusPrototypicalModel": "03_protonet_pl.ipynb",
         "ProtoModule": "03_protonet_pl.ipynb",
         "Classifier": "03b_ProtoCLR.ipynb",
         "get_train_images": "03b_ProtoCLR.ipynb",
         "WandbImageCallback": "03b_ProtoCLR.ipynb",
         "TensorBoardImageCallback": "03b_ProtoCLR.ipynb",
         "ConfidenceIntervalCallback": "03b_ProtoCLR.ipynb",
         "UMAPCallback": "03b_ProtoCLR.ipynb",
         "UMAPClusteringCallback": "03b_ProtoCLR.ipynb",
         "ProtoCLR": "03b_ProtoCLR.ipynb",
         "Partition": "04_cactus.ipynb",
         "CactusTaskDataset": "04_cactus.ipynb",
         "get_partitions_kmeans": "04_cactus.ipynb",
         "DataOpt": "04_cactus.ipynb",
         "LoaderOpt": "04_cactus.ipynb",
         "load": "04_cactus.ipynb",
         "CactusDataModule": "04_cactus.ipynb"}

modules = ["nn_utils.py",
           "pl_dataloaders.py",
           "hypergrad.py",
           "proto_utils.py",
           "maml.py",
           "imaml.py",
           "protonets.py",
           "protoclr.py",
           "cactus.py"]

doc_url = "https://ojss.github.io/unsupervised_meta_learning/"

git_url = "https://github.com/ojss/unsupervised_meta_learning/tree/main/"

def custom_doc_links(name): return None
